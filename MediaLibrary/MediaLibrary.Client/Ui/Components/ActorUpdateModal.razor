@inject IMediaLibraryApiWrapper MediaLibraryApi

<Modal @ref="_actorModal">
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Изменить исполнителя</ModalTitle>
                <CloseButton Clicked="CloseActorModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Имя исполнителя</FieldLabel>
                    @if (ActorToUpdate != null)
                    {
                        <InputText @bind-Value="ActorToUpdate.Name" />
                    }
                </Field>
                <Field>
                    <FieldLabel>Описание исполнителя</FieldLabel>
                    @if (ActorToUpdate != null)
                    {
                        <InputTextArea @bind-Value="ActorToUpdate.Description" />
                    }
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseActorModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="UpdateActorAsync">Изменить</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnActorUpdated { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public ActorDto? ActorToUpdate { get; set; }

    private Modal _actorModal = new();

    public async Task Show() => await _actorModal.Show();

    private async Task CloseActorModalAsync() => await _actorModal.Hide();

    private async Task UpdateActorAsync()
    {
        await MediaLibraryApi.UpdateActor(Id, ActorToUpdate!);
        await _actorModal.Hide();
        await OnActorUpdated.InvokeAsync();
    }
}
