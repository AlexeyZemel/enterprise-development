@inject IMediaLibraryApiWrapper MediaLibraryApi

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Жанры</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Создать
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="Genre"
                  Data="Genres"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="Genre"
                                Field="@nameof(Genre.Id)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteGenreAsync(context)">
                                    Удалить
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Genre"
                                Field="@nameof(Genre.Name)"
                                Caption="Название жанра">
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<GenreCreateModal @ref="GenreCreateModal" OnGenreAdded="@HandleGenreListChanged" />
<GenreUpdateModal @ref="GenreUpdateModal" GenreToUpdate="SelectedGenre" Id="SelectedId" OnGenreUpdated="@HandleGenreListChanged" />

@code {
    private IEnumerable<Genre> Genres { get; set; } = [];
    private int SelectedId { get; set; }
    private GenreDto? SelectedGenre { get; set; }
    private GenreCreateModal GenreCreateModal { get; set; } = new();
    private GenreUpdateModal GenreUpdateModal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshGenresCollection();
        await base.OnInitializedAsync();
    }

    private async Task OpenEditPageAsync(Genre context)
    {
        SelectedId = context.Id;
        SelectedGenre = new()
            {
                Name = context.Name
            };
        await GenreUpdateModal.Show();
    }

    private async Task DeleteGenreAsync(Genre context)
    {
        await MediaLibraryApi.DeleteGenre(context.Id);
        await RefreshGenresCollection();
    }

    private async Task HandleGenreListChanged()
    {
        await RefreshGenresCollection();
    }

    private async Task OpenCreateModal() => await GenreCreateModal.Show();

    private async Task RefreshGenresCollection() => Genres = await MediaLibraryApi.GetAllGenre();
}
