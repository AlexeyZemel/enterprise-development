@inject IMediaLibraryApiWrapper MediaLibraryApi

<Modal @ref="_actorGenreModal">
    <Alert Color="Color.Danger" @bind-Visible="@_isAlertVisible">
        <AlertMessage>Список актеров или жанров пуст!</AlertMessage>
    </Alert>
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Изменить связь Актер-Жанр</ModalTitle>
                <CloseButton Clicked="CloseActorGenreModalAsync" />
            </ModalHeader>

            <ModalBody>
                @if (ActorGenreToUpdate != null)
                {
                    <Field>
                        <FieldLabel>Выберите актера</FieldLabel>
                        <Select TValue="int" @bind-SelectedValue="ActorGenreToUpdate!.ActorId">
                            @if (_actors != null)
                            {
                                @foreach (var actor in _actors)
                                {
                                    <SelectItem Value="@actor.Id">@actor.Name</SelectItem>
                                }
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Выберите жанр</FieldLabel>
                        <Select TValue="int" @bind-SelectedValue="ActorGenreToUpdate!.GenreId">
                            @if (_genres != null)
                            {
                                @foreach (var genre in _genres)
                                {
                                    <SelectItem Value="@genre.Id">@genre.Name</SelectItem>
                                }
                            }
                        </Select>
                    </Field>
                }
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseActorGenreModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="UpdateActorGenreAsync">Изменить</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnActorGenreUpdated { get; set; }
    [Parameter]
    public int AgId { get; set; }
    [Parameter]
    public ActorGenreDto? ActorGenreToUpdate { get; set; }

    private IEnumerable<Actor>? _actors;
    private IEnumerable<Genre>? _genres;
    private Modal _actorGenreModal = new();
    private bool _isAlertVisible = false;

    public async Task Show()
    {
        await LoadActorsAsync();
        await LoadGenresAsync();
        await _actorGenreModal.Show();
    }

    private async Task CloseActorGenreModalAsync()
    {
        _isAlertVisible = false;
        ActorGenreToUpdate = new();
        await _actorGenreModal.Hide();
    }

    private async Task UpdateActorGenreAsync()
    {
        try
        {
            await MediaLibraryApi.UpdateActorGenre(AgId, ActorGenreToUpdate!);
            await CloseActorGenreModalAsync();
            await OnActorGenreUpdated.InvokeAsync();
        }
        catch
        {
            _isAlertVisible = true;
        }
    }

    private async Task LoadActorsAsync()
    {
        _actors = await MediaLibraryApi.GetAllActor();
        if (_actors?.FirstOrDefault() is null)
        {
            ActorGenreToUpdate!.ActorId = 0;
        }
        else
        {
            ActorGenreToUpdate!.ActorId = _actors.FirstOrDefault()!.Id;
        }
    }

    private async Task LoadGenresAsync()
    {
        _genres = await MediaLibraryApi.GetAllGenre();
        if (_genres?.FirstOrDefault() is null)
        {
            ActorGenreToUpdate!.GenreId = 0;
        }
        else
        {
            ActorGenreToUpdate!.GenreId = _genres.FirstOrDefault()!.Id;
        }
    }
}
