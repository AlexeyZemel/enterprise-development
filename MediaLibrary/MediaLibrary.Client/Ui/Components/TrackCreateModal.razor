@inject IMediaLibraryApiWrapper MediaLibraryApi

<Modal @ref="_trackModal">
    <Alert Color="Color.Danger" @bind-Visible="_isAlertVisible">
        <AlertMessage>Не удалось создать трек. Проверьте данные и попробуйте снова.</AlertMessage>
    </Alert>
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Новый трек</ModalTitle>
                <CloseButton Clicked="CloseTrackModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Альбом</FieldLabel>
                    <Select TValue="int" @bind-SelectedValue="_newTrack.AlbumId">
                        @if (_albums != null)
                        {
                            @foreach (var album in _albums)
                            {
                                <SelectItem Value="@album.Id">@($"{album.Id} | {album.Name}")</SelectItem>
                            }
                        }
                    </Select>
                </Field>
                <Field>
                    <FieldLabel>Номер трека</FieldLabel>
                    <InputNumber @bind-Value="_newTrack.Number" />
                </Field>
                <Field>
                    <FieldLabel>Название трека</FieldLabel>
                    <TextEdit @bind-Text="_newTrack.Name" />
                </Field>
                <Field>
                    <FieldLabel>Продолжительность трека</FieldLabel>
                    <TextEdit @bind-Text="_newTrack.Time" />
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseTrackModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="CreateTrackAsync">Создать</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnTrackAdded { get; set; }

    private Modal _trackModal = new();
    private TrackDto _newTrack = new();
    private IEnumerable<Album>? _albums;
    private bool _isAlertVisible = false;

    public async Task Show()
    {
        await LoadAlbumsAsync();
        _newTrack.Time = "00:00:00";
        await _trackModal.Show();
    }

    private async Task CloseTrackModalAsync()
    {
        _isAlertVisible = false;
        _newTrack = new();
        await _trackModal.Hide();
    }

    private async Task CreateTrackAsync()
    {
        try
        {
            await MediaLibraryApi.CreateTrack(_newTrack);
            await CloseTrackModalAsync();
            await OnTrackAdded.InvokeAsync();
        }
        catch
        {
            _isAlertVisible = true;
        }
    }

    private async Task LoadAlbumsAsync()
    {
        _albums = await MediaLibraryApi.GetAllAlbum();
        if (_albums?.FirstOrDefault() is null)
        {
            _newTrack.AlbumId = 0;
        }
        else
        {
            _newTrack.AlbumId = _albums.FirstOrDefault()!.Id;
        }
    }
}
