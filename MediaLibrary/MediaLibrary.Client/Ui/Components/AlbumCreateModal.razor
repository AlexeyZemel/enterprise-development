@inject IMediaLibraryApiWrapper MediaLibraryApi

<Modal @ref="_albumModal">
    <Alert Color="Color.Danger" @bind-Visible="@_isAlertVisible">
        <AlertMessage>Не удалось создать альбом. Проверьте данные и попробуйте снова.</AlertMessage>
    </Alert>
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Новый альбом</ModalTitle>
                <CloseButton Clicked="CloseAlbumModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Исполнитель</FieldLabel>
                    <Select TValue="int" @bind-SelectedValue="_newAlbum.ActorId">
                        @if (_actors != null)
                        {
                            @foreach (var actor in _actors)
                            {
                                <SelectItem Value="@actor.Id">@($"{actor.Id} | {actor.Name}")</SelectItem>
                            }
                        }
                    </Select>
                </Field>
                <Field>
                    <FieldLabel>Название альбома</FieldLabel>
                    <TextEdit @bind-Text="_newAlbum.Name" />
                </Field>
                <Field>
                    <FieldLabel>Дата релиза</FieldLabel>
                    <InputDate @bind-Value="_newAlbum.Date" />
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseAlbumModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="CreateAlbumAsync">Создать</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnAlbumAdded { get; set; }

    private Modal _albumModal = new();
    private AlbumDto _newAlbum = new();
    private IEnumerable<Actor>? _actors;
    private bool _isAlertVisible = false;

    public async Task Show()
    {
        await LoadActorsAsync();
        _newAlbum.Date = DateTime.Now;
        await _albumModal.Show();
    }

    private async Task CloseAlbumModalAsync()
    {
        _isAlertVisible = false;
        _newAlbum = new();
        await _albumModal.Hide();
    }

    private async Task CreateAlbumAsync()
    {
        try
        {
            await MediaLibraryApi.CreateAlbum(_newAlbum);
            await CloseAlbumModalAsync();
            await OnAlbumAdded.InvokeAsync();
        }
        catch
        {
            _isAlertVisible = true;
        }
    }

    private async Task LoadActorsAsync()
    {
        _actors = await MediaLibraryApi.GetAllActor();
        if (_actors.FirstOrDefault() is null)
        {
            _newAlbum.ActorId = 0;
        }
        else
        {
            _newAlbum.ActorId = _actors.FirstOrDefault()!.Id;
        }
    }
}
