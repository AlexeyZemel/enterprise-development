@inject IMediaLibraryApiWrapper MediaLibraryApi

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Актеры и Жанры</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="OpenCreateModal">
                    Создать
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="ActorGenre"
                  Data="_actorGenres"
                  Responsive
                  Striped>
            <DataGridColumns>
                <DataGridColumn Width="150px"
                                TItem="ActorGenre"
                                Field="@nameof(ActorGenre.Id)"
                                Caption="Действия">
                    <DisplayTemplate>
                        <Dropdown>
                            <DropdownToggle Color="Color.Primary">
                                Действия
                            </DropdownToggle>
                            <DropdownMenu>
                                <DropdownItem Clicked="() => OpenEditPageAsync(context)">
                                    Редактировать
                                </DropdownItem>
                                <DropdownItem Clicked="() => DeleteActorGenreAsync(context)">
                                    Удалить
                                </DropdownItem>
                            </DropdownMenu>
                        </Dropdown>
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ActorGenre"
                                Field="@nameof(ActorGenre.ActorId)"
                                Caption="Актер">
                    <DisplayTemplate>
                        @GetActorName(context.ActorId)
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ActorGenre"
                                Field="@nameof(ActorGenre.GenreId)"
                                Caption="Жанр">
                    <DisplayTemplate>
                        @GetGenreName(context.GenreId)
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<ActorGenreCreateModal @ref="_actorGenreCreateModal" OnActorGenreAdded="@HandleActorGenreListChanged" />
<ActorGenreUpdateModal @ref="_actorGenreUpdateModal" ActorGenreToUpdate="_selectedActorGenre" AgId="_selectedId" OnActorGenreUpdated="@HandleActorGenreListChanged" />

@code {
    private IEnumerable<ActorGenre> _actorGenres = new List<ActorGenre>();
    private IEnumerable<Actor>? _actors;
    private IEnumerable<Genre>? _genres;
    private int _selectedId;
    private ActorGenreDto? _selectedActorGenre;
    private ActorGenreCreateModal _actorGenreCreateModal = new();
    private ActorGenreUpdateModal _actorGenreUpdateModal = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshActorGenreCollection();
        await base.OnInitializedAsync();
    }

    private async Task OpenEditPageAsync(ActorGenre context)
    {
        _selectedId = context.Id;
        _selectedActorGenre = new ActorGenreDto
        {
            ActorId = context.ActorId,
            GenreId = context.GenreId
        };
        await _actorGenreUpdateModal.Show();
    }

    private async Task DeleteActorGenreAsync(ActorGenre context)
    {
        await MediaLibraryApi.DeleteActorGenre(context.Id);
        await RefreshActorGenreCollection();
    }

    private async Task HandleActorGenreListChanged()
    {
        await RefreshActorGenreCollection();
    }

    private async Task OpenCreateModal() => await _actorGenreCreateModal.Show();

    private async Task RefreshActorGenreCollection()
    {
        _actorGenres = await MediaLibraryApi.GetAllActorGenre();
        _actors = await MediaLibraryApi.GetAllActor();
        _genres = await MediaLibraryApi.GetAllGenre();
    }

    private string GetActorName(int actorId)
    {
        return _actors?.FirstOrDefault(a => a.Id == actorId)?.Name ?? "Неизвестный актер";
    }

    private string GetGenreName(int genreId)
    {
        return _genres?.FirstOrDefault(g => g.Id == genreId)?.Name ?? "Неизвестный жанр";
    }
}
