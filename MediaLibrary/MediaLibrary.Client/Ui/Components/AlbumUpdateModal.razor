@inject IMediaLibraryApiWrapper MediaLibraryApi

<Modal @ref="_albumModal">
    <Alert Color="Color.Danger" @bind-Visible="@_isAlertVisible">
        <AlertMessage>Список исполнителей пуст или ошибка при обновлении альбома!</AlertMessage>
    </Alert>
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Изменить альбом</ModalTitle>
                <CloseButton Clicked="CloseAlbumModalAsync" />
            </ModalHeader>

            <ModalBody>
                @if (AlbumToUpdate != null)
                {
                    <Field>
                        <FieldLabel>Выберите исполнителя</FieldLabel>
                        <Select TValue="int" @bind-SelectedValue="AlbumToUpdate!.ActorId">
                            @if (_actors != null)
                            {
                                @foreach (var actor in _actors)
                                {
                                    <SelectItem Value="@actor.Id">@($"{actor.Id} | {actor.Name}")</SelectItem>
                                }
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>Название альбома</FieldLabel>
                        <TextEdit @bind-Text="AlbumToUpdate.Name" />
                    </Field>
                    <Field>
                        <FieldLabel>Дата релиза</FieldLabel>
                        <InputDate TValue="DateTimeOffset" @bind-Value="AlbumToUpdate.Date" />
                    </Field>
                }
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseAlbumModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="UpdateAlbumAsync">Изменить</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnAlbumUpdated { get; set; }
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public AlbumDto? AlbumToUpdate { get; set; }

    private IEnumerable<Actor>? _actors;
    private Modal _albumModal = new();   
    private bool _isAlertVisible = false;

    public async Task Show()
    {
        await LoadActorsAsync();
        AlbumToUpdate!.Date = DateTime.Now;
        await _albumModal.Show();
    }

    private async Task CloseAlbumModalAsync()
    {
        _isAlertVisible = false;
        AlbumToUpdate = new();
        await _albumModal.Hide();
    }

    private async Task LoadActorsAsync()
    {
        _actors = await MediaLibraryApi.GetAllActor();
        if (_actors?.FirstOrDefault() is null)
        {
            AlbumToUpdate!.ActorId = 0;
        }
        else
        {
            AlbumToUpdate!.ActorId = _actors.FirstOrDefault()!.Id;
        }
    }

    private async Task UpdateAlbumAsync()
    {
        try
        {
            await MediaLibraryApi.UpdateAlbum(Id, AlbumToUpdate!);
            await CloseAlbumModalAsync();
            await OnAlbumUpdated.InvokeAsync();
        }
        catch
        {
            _isAlertVisible = true;
        }
    }
}
