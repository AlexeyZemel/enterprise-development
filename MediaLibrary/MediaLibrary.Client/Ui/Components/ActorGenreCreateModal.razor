@inject IMediaLibraryApiWrapper MediaLibraryApi

<Modal @ref="_actorGenreModal">
    <Alert Color="Color.Danger" @bind-Visible="@_isAlertVisible">
        <AlertMessage>Не удалось создать связь. Проверьте данные и попробуйте снова.</AlertMessage>
    </Alert>
    <ModalContent Centered>
        <Form>
            <ModalHeader>
                <ModalTitle>Новая связь Актер-Жанр</ModalTitle>
                <CloseButton Clicked="CloseActorGenreModalAsync" />
            </ModalHeader>

            <ModalBody>
                <Field>
                    <FieldLabel>Исполнитель</FieldLabel>
                    <Select TValue="int" @bind-SelectedValue="_newActorGenre.ActorId">
                        @if (_actors != null)
                        {
                            @foreach (var actor in _actors)
                            {
                                <SelectItem Value="@actor.Id">@actor.Name</SelectItem>
                            }
                        }
                    </Select>
                </Field>

                <Field>
                    <FieldLabel>Жанр</FieldLabel>
                    <Select TValue="int" @bind-SelectedValue="_newActorGenre.GenreId">
                        @if (_genres != null)
                        {
                            @foreach (var genre in _genres)
                            {
                                <SelectItem Value="@genre.Id">@genre.Name</SelectItem>
                            }
                        }
                    </Select>
                </Field>
            </ModalBody>

            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseActorGenreModalAsync">Отмена</Button>
                <Button Color="Color.Primary" Clicked="CreateActorGenreAsync">Создать</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnActorGenreAdded { get; set; }

    private Modal _actorGenreModal = new();
    private ActorGenreDto _newActorGenre = new();
    private IEnumerable<Actor>? _actors;
    private IEnumerable<Genre>? _genres;
    private bool _isAlertVisible = false;

    public async Task Show()
    {
        await LoadActorsAndGenresAsync();
        await _actorGenreModal.Show();
    }

    private async Task CloseActorGenreModalAsync()
    {
        _isAlertVisible = false;
        _newActorGenre = new();
        await _actorGenreModal.Hide();
    }

    private async Task CreateActorGenreAsync()
    {
        try
        {
            await MediaLibraryApi.CreateActorGenre(_newActorGenre);
            await CloseActorGenreModalAsync();
            await OnActorGenreAdded.InvokeAsync();
        }
        catch
        {
            _isAlertVisible = true;
        }
    }

    private async Task LoadActorsAndGenresAsync()
    {
        _actors = await MediaLibraryApi.GetAllActor(); 
        if (_actors?.FirstOrDefault() is null)
        {
            _newActorGenre.ActorId = 0;
        }
        else
        {
            _newActorGenre.ActorId = _actors.FirstOrDefault()!.Id;
        }
        _genres = await MediaLibraryApi.GetAllGenre();
        if (_genres?.FirstOrDefault() is null)
        {
            _newActorGenre.GenreId = 0;
        }
        else
        {
            _newActorGenre.GenreId = _genres.FirstOrDefault()!.Id;
        }
    }
}
